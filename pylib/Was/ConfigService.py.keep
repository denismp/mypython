#!/usr/bin/env jython
######################################################################################
##	ConfigService.py
##
##	Python module extends the WAS ConfigService and contains the ConfigServiceFactory,
##	SessionPropertyConstants, SystemAttributes, and ConfigDataId objects.
######################################################################################
##
##	MODIFICATION HISTORY:
##	DATE		WHOM				DESCRIPTION
##	10/29/2009	Denis M. Putnam		Created.
######################################################################################
import os, sys
import re
import socket
from pylib.Utils.MyLogger import *
from pylib.Utils.MyUtils import *
from pylib.Was.WasProperties import *
from pylib.Was.AdminClient import *

import com.ibm.websphere.management.AdminClient
from com.ibm.websphere.management.configservice import ConfigService
#from com.ibm.websphere.management.configservice import ConfigServiceHelper
from com.ibm.websphere.management.configservice import ConfigServiceProxy

from com.ibm.websphere.management.configservice import SessionPropertyConstants
#from com.ibm.websphere.management.configservice import ConfigServiceFactory
from com.ibm.websphere.management.configservice import SystemAttributes

from com.ibm.websphere.management.configservice import ConfigDataId
from com.ibm.websphere.management.sync import SyncResult

class ConfigService( ConfigServiceProxy ):
	"""ConfigService class that contains WAS ConfigService utilities."""

	##################################################################################
	#	__init__()
	#
	#	DESCRIPTION:
	#		Class initializer.
	#
	#	PARAMETERS:
	#		See below.
	#
	#	RETURN:
	#		An instance of this class
	##################################################################################
	def __init__(
				self, 
				adminClient=None,
				logger=None
		):
		"""Class Initializer.
           Python module extends the WAS ConfigService and contains the ConfigServiceFactory,
           SessionPropertyConstants, SystemAttributes, and ConfigDataId objects.
           PARAMETERS:
               adminClient - instance of the com.ibm.websphere.management.AdminClient class.
               logger      - instance of the pylib.Utils.MyLogger class.

           RETURN:
               An instance of this class
		"""
		self.logger				= logger
		if adminClient is None: raise Exception, "Please specify the com.ibm.websphere.management.AdminClient connection instance."
		ConfigServiceProxy.__init__( self, adminClient )
		#if logger is None: raise Exception, "Please specify the logger instance."
		#self.configServiceHelper		= ConfigServiceHelper()
		self.systemAttributes			= SystemAttributes()
		self.sessionPropertyConstants	= SessionPropertyConstants
		#self.configServiceFactory		= ConfigServiceFactory()
		self.configDataId				= None
		self.syncResult					= SyncResult

		self.logMySelf()
		self.validate()

	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	validate()
	#
	#	DESCRIPTION:
	#		Validate the parameters and calculated values.
	#
	#	PARAMETERS:
	#
	#	RETURN:
	#		True for valid.
	##################################################################################
	def validate(self):
		"""Validate the parameters and calculated values.
           PARAMETERS:

           RETURN:
               True for valid or False.
		"""
		rVal = False
		#return rVal
		return True

	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	logMySelf()
	#
	#	DESCRIPTION:
	#		Log myself.
	#
	#	PARAMETERS:
	#
	#	RETURN:
	##################################################################################
	def logMySelf(self, debugOnly=True):
		"""Log myself.
        PARMETERS:
            debugOnly is either True or False.  A value of True will only log if the
            logger's debug flag is set.
        """

		myAttrs = dir( self )
		for attr in myAttrs:
			try:
				#if re.search( '__doc__',  attr ): continue
				##if re.search( '__module__',  attr ): continue
				#if re.search( 'bound method', str( getattr( self, attr ) ) ): continue
				##if re.search( 'instance', str( getattr( self, attr ) ) ): continue
				if re.search( 'supportedConfigObjectTypes',  attr ): continue
				#self.debug( __name__ + ".logMySelf(): attr=" + str( attr ) + "\n" )
				if( debugOnly == True ):
					self.debug( __name__ + ".logMySelf(): " + str( attr ) + "=" + str( getattr( self, attr ) ) + "\n" )
				else:
					self.logIt( __name__ + ".logMySelf(): " + str( attr ) + "=" + str( getattr( self, attr ) ) + "\n" )
				#Endif
			except Exception, e:
				self.debug( __name__ + ".logMySelf(): " + str( e ) + "\n" )
				continue
			#Endtry
		#Endfor
		#self.env.logMySelf( debugOnly=debugOnly )

	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	logIt()
	#
	#	DESCRIPTION:
	#		Write a message to the log and possibly stdout.
	#
	#	PARAMETERS:
	#		msg - what you want to log.
	#
	#	RETURN:
	##################################################################################
	def logIt(self, msg):
		"""Write a message to the log and possibly stdout."""

		if( self.logger ): self.logger.logIt( msg )

	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	debug()
	#
	#	DESCRIPTION:
	#		Write a message to the log and possibly stdout.
	#
	#	PARAMETERS:
	#		msg - what you want to log.
	#
	#	RETURN:
	##################################################################################
	def debug(self, msg):
		"""Write a message to the log and possibly stdout."""

		if( self.logger ): self.logger.debug( msg )

	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	closeMe()
	#
	#	DESCRIPTION:
	#		Closes this instance.
	#
	#	PARAMETERS:
	#
	#	RETURN:
	##################################################################################
	def closeMe(self):
		"""Closes this instance."""
		self.debug( __name__ + ".closeMe(): called.\n" )
	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	__del__()
	#
	#	DESCRIPTION:
	#		Closes this instance.
	#
	#	PARAMETERS:
	#
	#	RETURN:
	##################################################################################
	def __del__(self):
		"""Closes this instance."""
		#self.logIt( __name__ + ".__del__(): called.\n" )
		self.closeMe()
	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	getConfigDataById()
	#
	#	DESCRIPTION:
	#		Get a com.ibm.websphere.management.configservice.ConfigDataId object.
	#
	#	PARAMETERS:
	#
	#	RETURN:
	#		True for valid.
	##################################################################################
	def getConfigDataById(self, id=None):
		"""Get a com.ibm.websphere.management.configservice.ConfigDataId object.
           PARAMETERS:
               id - a java.lang.String object.

           RETURN:
               A com.ibm.websphere.management.configservice.ConfigDataId object.
		"""
		if id == None:
			raise Exception, "Please provide a java.lang.String id"
		#Endif
		self.configDataId = ConfigDataId( id )
		return self.configDataId

	##################################################################################
	#Enddef
	##################################################################################

	##################################################################################
	#	getConfigDataByURI()
	#
	#	DESCRIPTION:
	#		Get a com.ibm.websphere.management.configservice.ConfigDataId object.
	#
	#	PARAMETERS:
	#
	#	RETURN:
	#		True for valid.
	##################################################################################
	def getConfigDataByURI(self, contextUri=None, href=None):
		"""Get a com.ibm.websphere.management.configservice.ConfigDataId object.
           PARAMETERS:
               id - a java.lang.String object.

           RETURN:
               A com.ibm.websphere.management.configservice.ConfigDataId object.
		"""
		if contextUri == None:
			raise Exception, "Please provide a java.lang.String contextUri"
		#Endif
		if href == None:
			raise Exception, "Please provide a java.lang.String hred"
		#Endif
		self.configDataId = ConfigDataId( contextUri, href )
		return self.configDataId

	##################################################################################
	#Enddef
	##################################################################################
######################################################################################
#Endclass
######################################################################################

#########################################################################
#	For testing.
#########################################################################
def main():
	myLogger	= MyLogger( LOGFILE="/tmp/ConfigService.log", STDOUT=True, DEBUG=True )
	adminClient = AdminClient( logger=myLogger, hostname="dilabvirt31-v1" )
	try:
		myconn		= adminClient.createRMIDefault()
		print dir( myconn )
		myObject	= ConfigService( myconn, logger=myLogger )
		tmyconn		= myObject.getAdminClient()
		print dir( tmyconn )
		print dir( myObject )
		#print dir( myObject.configServiceHelper	)
		print dir( myObject.systemAttributes )
		print dir( myObject.sessionPropertyConstants )
		#print dir( myObject.configServiceFactory )
		myObject.closeMe()
	except Exception, e:
		myLogger.logIt( "main(): Unable to connect to the AdminClient.  Make sure that the WAS Manager is running.\n" + str( e ) + "\n" )
	#EndExcept
	##################################################################################
	#Enddef
	##################################################################################

#########################################
#   End
#########################################
if __name__ == "__main__":
	main()

